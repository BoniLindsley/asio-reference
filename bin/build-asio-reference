#!/bin/sh

# ######################################
# Define functions for printing messages

# The path to the current running script.
script_path="$(readlink -f "$0")"
# Used for reporting error.
script_filename="$(basename "$script_path")"

printf_msg() {
  printf '%s: ' "$script_filename"
  printf "$@"
}

# A script function for reporting errors and then exiting.
error_printf_exit() {
  # Preserve the return value given by the previous command
  #   unless it was zero.
  return_value=$?
  if [ 0 -eq $return_value ]; then
    return_value=1
  fi
  printf_msg "$@" 1>&2
  exit $return_value
}

# ################
# Find Asio source

# Assume the current working directory is the Asio Git repository
#   to compile references for.
asio_local_repo_path="$PWD"
asio_remote_repo_path='https://github.com/chriskohlhoff/asio'

# Clone the Asio Git repo if it is not found.
if [ ! -d .git ]; then
  printf_msg 'Cloning the Asio Git repo.\n'
  git init \
    && git remote add origin "$asio_remote_repo_path" \
    && git pull --depth=1 origin master \
    || error_printf_exit  'Failed to clone Asio source:\n  %s\n' \
                          "$asio_remote_repo_path"
fi

# The commit message for the Asio reference repository will simply
#   contain the ref and date of the corresponding Asio commit.
commit_message="$(git show -s --format="Update to Asio ref %h %cI" HEAD)"

# #################
# Find Boost source

# Asio build scripts expect Boost src to be inside Asio repo root.
boost_local_repo_path="$asio_local_repo_path/boost"
boost_remote_repo_path='https://github.com/boostorg/boost'

# Clone the Boost Git repo if it is not found.
mkdir -p "$boost_local_repo_path"
cd "$boost_local_repo_path"
if [ ! -d .git ]; then
  printf_msg 'Cloning the Boost Git repo.\n'
  git init \
    && git remote add origin "$boost_remote_repo_path" \
    && git pull --depth=1 origin master \
    || error_printf_exit  'Failed to clone Boost source:\n  %s\n' \
                          "$boost_remote_repo_path"
fi

# Boost repo uses submodules for its libraries.
# Only one of the submodules is needed for compiling references.
git submodule init tools/boostbook \
  || error_printf_exit 'Failed to initialise BoostBook Git submodule.\n'
git submodule update --depth=1 \
  || error_printf_exit 'Failed to update BoostBook Git submodule\n'

# ###########################
# Generate Asio documentation

printf_msg 'Generating Asio documentations.\n'
# Boost.Build needs to be ran in the doc source directory.
asio_doc_src_path="$asio_local_repo_path/asio/src/doc"
asio_doc_output_path="$asio_doc_src_path/html"
cd "$asio_doc_src_path" \
  || error_printf_exit 'Unable to find source directory for docs.\n'
# This will generate the documentations.
# May take a while to run, and likely to be CPU-bound.
b2 \
  || error_printf_exit 'Boost.Build failed to build documentation.\n'
# GitHub pages expects an `index.html` output.
# Check that it is created.
test -e "$asio_doc_output_path/index.html" \
  || error_printf_exit 'Unable to find index.html from generated docs.\n'
# Required graphics from the Boost repo do not seem to be copied over.
printf_msg 'Copying resource files from Boost repo.\n'
cp "$boost_local_repo_path/doc/src/images/home.png" \
   "$boost_local_repo_path/doc/src/images/next.png" \
   "$boost_local_repo_path/doc/src/images/note.png" \
   "$boost_local_repo_path/doc/src/images/prev.png" \
   "$boost_local_repo_path/doc/src/images/up.png" \
   "$asio_doc_output_path"    # Copy destination.

# #####################
# Confirm output upload
#
# The script gives an opportunity here to exit before the upload step.
# This means that the output documentation
#   will remain in the local Asio Git repository.
# In particular,
#   by using a persistent volume for the local repo in Docker,
#   the output can be accessed.

# The script will ask for a remote repository for uploading the output.
# This repository will be stored locally in the output directory.
asio_reference_local_repo_path="$asio_doc_output_path"
cd "$asio_reference_local_repo_path"

# Set the remote to push to.
printf_msg 'Uploading Asio documentation to a Git repository.\n'
# If the directory is not a Git repo, make it into a Git repo.
# This is a necessary step for the remote detection below.
# If `git init` is not called,
#   then the parent Asio repo  will be detected as an upload target.
git init \
  || error_printf_exit 'Cannot initialise Asio reference Git repo.\n'
# Check if `origin` remote exists.
# If not, ask for it from stdin.
git_origin_path="$(git config remote.origin.url)"
# If remote origin exists,
# Confirm that upload is desired before proceeding.
if [ -n "$git_origin_path" ]; then
  printf_msg 'Push to the following Git repo?\n  %s\n' "$git_origin_path"
  printf_msg 'Press <Y> to confirm.\n'
  printf_msg 'Press <N> to change the remote.\n'
  printf_msg 'Press <c-c> to abort.\n'
  printf '$ '
  read read_input
  if [ 'N' = "$read_input" ]; then
    printf_msg "Removing remote origin.\n"
    git remote remove origin \
      || error_printf_exit "Unable to remove 'origin' remote.\n"
    git_origin_path="$(git config remote.origin.url)"
  fi
  if [ 'Y' != "$read_input" ]; then
    error_printf_exit 'Unrecognised input. Aborting.\n'
  fi
fi
if [ -z "$git_origin_path" ]; then
  printf_msg 'Choose the remote to upload to.\n'
  printf '$ git remote add origin '
  read git_remote_path
  git remote add origin "$git_remote_path" \
    || error_printf_exit 'Unable to add Git remote.\n'
  git_origin_path="$(git config remote.origin.url)"

  printf_msg 'Remote is set as:\n  %s\n' "$git_origin_path"
  printf_msg "Press <Y> to confirm. Press <c-c> to abort.\n"
  printf '$ '
  read read_input
  if [ 'Y' != "$read_input" ]; then
    error_printf_exit 'Unrecognised input. Aborting.\n'
  fi
fi
printf_msg "Remote 'origin' is now set to:\n  $git_origin_path.\n"

# #######################
# Upload / pushing output

asio_reference_branch_name='gh-pages'
printf_msg 'Updating local repo from remote.\n'
git fetch --depth=1 origin "$asio_reference_branch_name"

# If it fails to fetch, the branch may not exist.
# Confirm before trying to push.
if [ 0 -ne $? ]; then
  printf_msg 'Unable to sync with remote.\n'
  printf_msg "Does remote '$asio_reference_branch_name' branch exist?\n"
  printf_msg "Press <Y> to try pushing anyway. Press <c-c> to abort.\n"
  printf '$ '
  read read_input
  if [ 'Y' != "$read_input" ]; then
    error_printf_exit 'Unrecognised input. Aborting.\n'
  fi
  git checkout -b "$asio_reference_branch_name"
else
  git reset --soft "origin/$asio_reference_branch_name" \
    || error_printf_exit 'Unable to switch to branch gh-pages.\n'
fi

# Make sure Git user credential is set.
# This is required to do a Git commit.
git config user.name > /dev/null
if [ 0 -ne $? ]; then
  printf_msg 'Git user name is not set.\n'
  if [ "$__quiet" = true ]; then
    return 1
  fi
  printf '$ git config user.name '
  read git_username
  git config user.name "$git_username" \
    || error_printf_exit 'Unable to set Git user name.\n'
fi
git config user.email > /dev/null
if [ 0 -ne $? ]; then
  printf_msg 'Git user email is not set.\n'
  if [ "$__quiet" = true ]; then
    return 1
  fi
  printf '$ git config user.email '
  read git_email
  git config user.email "$git_email" \
    || error_printf_exit 'Unable to set Git user email.\n'
fi

# Add changes and do the actual commit.
git add --all
# Commit might return non-zero if there are no changes
#   when compared to a previous local commit.
# But it might still be different from the remote.
# So do not check the return value.
git commit -m "$commit_message"
# This step might ask for authentication.
git push origin "HEAD:$asio_reference_branch_name" \
  || error_printf_exit 'Push to remote failed.\n'
