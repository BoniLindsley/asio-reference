#!/bin/sh

# ######################################
# Define functions for printing messages

# The path to the current running script.
script_path="$(readlink -f "$0")"
# Used for reporting error.
script_filename="$(basename "$script_path")"

printf_msg() {
  printf '%s: ' "$script_filename"
  printf "$@"
}

# A script function for reporting errors and then exiting.
error_printf_exit() {
  # Preserve the return value given by the previous command
  #   unless it was zero.
  return_value=$?
  if [ 0 -eq $return_value ]; then
    return_value=1
  fi
  printf_msg "$@" 1>&2
  exit $return_value
}

# ################
# Find Asio source

# Assume the current working directory is the Asio Git repository
#   to compile references for.
asio_local_repo_path="$PWD"
asio_doc_src_path="$asio_local_repo_path/asio/src/doc"

# The script will ask for a remote Asio reference repository
#   for storing the output.
# The output files will be stored in a `doc` directory in the repo.
# This repository will be stored locally and temporarily in a directory.
#
# Note that the script gives an opportunity to exit
#   before the upload step.
# This means that the output documentation
#   will remain in the local Asio Git repository.
# In particular,
#   by using a persistent volume for the local repo in Docker,
#   the output can be accessed.
asio_reference_local_repo_path="$asio_doc_src_path/asio-reference"

# Clone the Asio Git repo if it is not found.
if [ ! -d .git ]; then
  printf_msg 'Clone the Asio Git repo.\n'
  git init \
    && git remote add origin 'https://github.com/chriskohlhoff/asio' \
    && git pull --depth=1 origin master \
    || error_printf_exit  'Unable to clone Git repository for Asio.\n'
fi

# ###########################
# Generate Asio documentation

printf_msg 'Generating Asio documentation.\n'
# There is a hard-coded local `boostbook.dtd` path
#   inside `index.xml` and `quickref.xml`.
# It expected a `boost` repo to be inside the `asio` repo root dir?
# Mitigate this by symlinking Debian `boostbook.dtd` to the same path.
# Assume that this step was already done if the symlink target exists.
required_boostbook_parent_path="$asio_local_repo_path/boost/tools"
required_boostbook_path="$required_boostbook_parent_path/boostbook"
system_boostbook_path="/usr/share/boostbook"
if [ ! -e "$required_boostbook_path" ]; then
  mkdir -p "$required_boostbook_parent_path" \
    && ln -s -t "$required_boostbook_parent_path" \
             "$system_boostbook_path" \
    || error_printf_exit \
         'Unable to symlink `boostbook.dtd` for boostbook to find.\n'
fi
# Boost.Build needs to be ran in the doc source directory.
cd "$asio_doc_src_path" \
  || error_printf_exit 'Unable to find source directory for docs.\n'
# This will generate the documentations.
# May take a while to run, and likely to be CPU-bound.
b2 \
  || error_printf_exit 'Boost.Build failed to build documentation.\n'

# The commit message for the Asio reference repository will simply
#   contain the ref and date of the corresponding Asio commit.
commit_message="$(git show -s --format="Update to Asio ref %h %cI" HEAD)"

# #############
# Upload output

# Set the remote to push to.
printf_msg 'Uploading Asio documentation to a Git repository.\n'
# Create the local repo if necessary.
mkdir -p "$asio_reference_local_repo_path"
cd "$asio_reference_local_repo_path"
# If the directory is not a Git repo, make it into a Git repo.
# This is a necessary step for the remote detection below.
# If `git init` is not called,
#   then the parent Asio repo  will be detected as an upload target.
git init \
  || error_printf_exit 'Cannot initialise Asio reference Git repo.\n'
# Check if `origin` remote exists.
# If not, ask for it from stdin.
git_origin_path=$(git config remote.origin.url)
if [ -z "$git_origin_path" ]; then
  printf_msg 'Choose the remote to upload to.\n'
  printf '$ git remote add origin '
  read git_remote_path
  git remote add origin "$git_remote_path" \
    || error_printf_exit 'Unable to add Git remote.\n'
  git_origin_path=$(git config remote.origin.url)
fi
printf_msg "Remote is set as: $git_origin_path.\n"
printf_msg 'Updating local repo from remote.\n'
git pull --depth=1 origin master \
  || error_printf_exit 'Unable to sync with remote.\n'

# Replace the `docs` directory with the `html` output.
# This assumes the repo expects the output to be in the `doc` directory.
printf_msg 'Replacing `docs` directory with new output.\n'
# `-d` - Removing a directory.
# `-f` - Suppress warning if `doc` does not exist.
# `-r` - Remove content of `doc` directory if they exist.
rm -dfr docs \
  || error_printf_exit 'Unable to remove the original `docs`.\n'
cp -r ../html docs \
  || error_printf_exit 'Unable to write to the `docs` directory.\n'

# Make sure Git user credential is set.
# This is required to do a Git commit.
git config user.email > /dev/null
if [ 0 -ne $? ]; then
  printf_msg 'Git user email is not set.\n'
  if [ "$__quiet" = true ]; then
    return 1
  fi
  printf '$ git config user.email '
  read git_email
  git config user.email "$git_email" \
    || error_printf_exit 'Unable to set Git user email.\n'
fi
git config user.name > /dev/null
if [ 0 -ne $? ]; then
  printf_msg 'Git user name is not set.\n'
  if [ "$__quiet" = true ]; then
    return 1
  fi
  printf '$ git config user.name '
  read git_username
  git config user.name "$git_username" \
    || error_printf_exit 'Unable to set Git user name.\n'
fi

# Add changes and do the actual commit.
git add docs
# Commit might return non-zero if there are no changes.
git commit -m "$commit_message"
# This step might ask for authentication.
git push origin master \
  || error_printf_exit 'Push to remote failed.\n'
